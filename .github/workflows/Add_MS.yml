name: Add Namespace and Microservice to Cluster

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'Selecciona el cluster'
        required: true
        type: choice
        options:
          - PDCOLClusterEA01
          - PDCOLClusterEA02
          - PDCOLClusterPosWebEA
          - PDMEXClusterEA
          - PDPTCOLClusterEA
          - QACOLClusterEA
          - QACOLClusterEA02
          - QACOLClusterPosWebEA
          - QAMEXClusterEA
          - QAPTCOLClusterEA
          - STCOLClusterEA
          - STMEXClusterEA
          - STPTCOLClusterEA
          - SiigoAcademico80sCluster
        default: PDCOLClusterEA01
      namespace:
        description: 'Nombre del namespace (ej: siigo-addons)'
        required: true
        type: string
        default: 'siigo-'
      microservice:
        description: 'Nombre del microservicio (ej: api-gateway-addons)'
        required: true
        type: string
        default: 'api-gateway-'

jobs:
  add-namespace-microservice:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Validate cluster file exists
      id: validate_cluster
      run: |
        CLUSTER_FILE=".github/Utils/ms-per-cluster/${{ inputs.cluster_name }}.json"
        if [ ! -f "$CLUSTER_FILE" ]; then
          echo "❌ Error: El archivo $CLUSTER_FILE no existe"
          echo "Clusters disponibles:"
          ls -la .github/Utils/ms-per-cluster/*.json | awk -F'/' '{print $NF}' | sed 's/.json$//' || echo "No se encontraron archivos JSON"
          exit 1
        fi
        echo "✅ Cluster file found: $CLUSTER_FILE"
        echo "📁 Procesando cluster: ${{ inputs.cluster_name }}"
        echo "cluster_file=$CLUSTER_FILE" >> $GITHUB_OUTPUT
    
    - name: Backup original file
      run: |
        cp "${{ steps.validate_cluster.outputs.cluster_file }}" "${{ steps.validate_cluster.outputs.cluster_file }}.backup"
    
    - name: Add namespace and microservice
      id: update_json
      run: |
        CLUSTER_FILE="${{ steps.validate_cluster.outputs.cluster_file }}"
        NAMESPACE="${{ inputs.namespace }}"
        MICROSERVICE="${{ inputs.microservice }}"
        
        # Crear script de Python para manipular el JSON
        cat > update_json.py << 'EOF'
        import json
        import sys
        import os
        
        def main():
            if len(sys.argv) != 4:
                print("❌ Error: Se requieren 3 argumentos: cluster_file, namespace, microservice")
                sys.exit(1)
            
            cluster_file = sys.argv[1]
            namespace = sys.argv[2]
            microservice = sys.argv[3]
            
            try:
                # Leer el archivo JSON
                with open(cluster_file, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
                
                # Verificar si el namespace ya existe
                if namespace in json_data:
                    print(f"⚠️  Warning: El namespace '{namespace}' ya existe con el valor '{json_data[namespace]}'")
                    print(f"Actualizando el microservicio de '{json_data[namespace]}' a '{microservice}'")
                
                # Agregar/actualizar el namespace y microservicio
                json_data[namespace] = microservice
                
                # Escribir el archivo JSON actualizado (con formato bonito)
                with open(cluster_file, 'w', encoding='utf-8') as f:
                    json.dump(json_data, f, indent=2, ensure_ascii=False)
                    f.write('\n')  # Agregar nueva línea al final
                
                print(f"✅ Namespace '{namespace}' agregado/actualizado con microservicio '{microservice}'")
                print(f"📁 Archivo actualizado: {cluster_file}")
                
                # Mostrar el contenido actualizado
                print('\n📋 Contenido actualizado:')
                print(json.dumps(json_data, indent=2, ensure_ascii=False))
                
            except FileNotFoundError:
                print(f"❌ Error: No se pudo encontrar el archivo {cluster_file}")
                sys.exit(1)
            except json.JSONDecodeError as e:
                print(f"❌ Error: Archivo JSON inválido - {e}")
                sys.exit(1)
            except Exception as e:
                print(f"❌ Error inesperado: {e}")
                sys.exit(1)
        
        if __name__ == "__main__":
            main()
        EOF
        
        # Ejecutar el script de Python
        python update_json.py "$CLUSTER_FILE" "$NAMESPACE" "$MICROSERVICE"
        
        # Limpiar archivo temporal
        rm update_json.py
    
    - name: Validate JSON syntax
      run: |
        echo "🔍 Validando sintaxis del JSON..."
        if ! jq empty "${{ steps.validate_cluster.outputs.cluster_file }}"; then
          echo "❌ Error: El archivo JSON tiene sintaxis inválida"
          echo "Restaurando backup..."
          cp "${{ steps.validate_cluster.outputs.cluster_file }}.backup" "${{ steps.validate_cluster.outputs.cluster_file }}"
          exit 1
        fi
        echo "✅ Sintaxis JSON válida"
    
    - name: Show changes
      run: |
        echo "📊 Cambios realizados:"
        echo "Archivo: ${{ steps.validate_cluster.outputs.cluster_file }}"
        echo "Namespace agregado: ${{ inputs.namespace }}"
        echo "Microservicio: ${{ inputs.microservice }}"
        echo ""
        echo "🔄 Diferencias:"
        diff -u "${{ steps.validate_cluster.outputs.cluster_file }}.backup" "${{ steps.validate_cluster.outputs.cluster_file }}" || true
    
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Agregar solo el archivo modificado
        git add "${{ steps.validate_cluster.outputs.cluster_file }}"
        
        # Verificar si hay cambios para commitear
        if git diff --staged --quiet; then
          echo "ℹ️  No hay cambios para commitear"
        else
          git commit -m "feat: Add namespace '${{ inputs.namespace }}' with microservice '${{ inputs.microservice }}' to ${{ inputs.cluster_name }}

          📁 Cluster: ${{ inputs.cluster_name }}
          🏷️  Namespace: ${{ inputs.namespace }}
          🔧 Microservice: ${{ inputs.microservice }}
          
          Auto-generated by GitHub Actions"
          
          echo "✅ Cambios commiteados exitosamente"
        fi
    
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
    
    - name: Cleanup backup
      run: |
        rm -f "${{ steps.validate_cluster.outputs.cluster_file }}.backup"
        echo "🧹 Backup eliminado"
    
    - name: Summary
      run: |
        echo "🎉 ¡Proceso completado exitosamente!"
        echo ""
        echo "📋 Resumen:"
        echo "  • Cluster: ${{ inputs.cluster_name }}"
        echo "  • Namespace: ${{ inputs.namespace }}"
        echo "  • Microservicio: ${{ inputs.microservice }}"
        echo "  • Archivo actualizado: ${{ steps.validate_cluster.outputs.cluster_file }}"
        echo ""
        echo "✅ El namespace y microservicio han sido agregados al cluster correctamente."
